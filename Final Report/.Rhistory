col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
plot(train_out$Q, train_out$pred$anomaly_score, col = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.50, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
plot(train_out$pred$anomaly_score,train_out$Q,  col = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.50, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.65, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.9, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.4, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.635, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.625, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.645, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6441, "outlier", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
iforest$fit(train)
train_out = data.frame(train)
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6441, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
# Loading the data
dt <- read_csv('data_stat450.csv')
dt2 <- dt
# Removing 'year' column
dt <- dt[-c(2)]
# Renaming column names for simplicity
colnames(dt) <- c('gridcode','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
# Converting gricode to a factor
dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
iforest = isolationForest$new()
iforest$fit(dt2)
iforest = isolationForest$new()
iforest$fit(na.omit(dt2))
train_out = data.frame(na.omit(dt2))
train_out$pred = iforest$predict(train_out)
iforest = isolationForest$new()
iforest$fit(na.omit(dt2))
train_out = data.frame(na.omit(dt2))
train_out
train_out$pred = iforest$predict(train_out)
# Loading the data
dt <- read_csv('data_stat450.csv')
dt2 <- dt
# Removing 'year' column
dt <- dt[-c(2)]
# Renaming column names for simplicity
colnames(dt) <- c('gridcode','year','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
# Converting gricode to a factor
dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
iforest = isolationForest$new()
iforest$fit(na.omit(dt))
train_out = data.frame(na.omit(dt))
train_out
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6441, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
dt
iforest$fit(na.omit(dt))
train_out = data.frame(na.omit(dt))
train_out
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6441, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
# Loading the data
dt <- read_csv('data_stat450.csv')
dt2 <- dt
# Removing 'year' column
#dt <- dt[-c(2)]
# Renaming column names for simplicity
colnames(dt) <- c('gridcode','year','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
# Converting gricode to a factor
dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
iforest = isolationForest$new()
dt
iforest$fit(na.omit(dt))
train_out = data.frame(na.omit(dt))
train_out
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.6441, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
iforest = isolationForest$new()
dt
iforest$fit(na.omit(dt))
train_out = data.frame(na.omit(dt))
train_out
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.65, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
# Loading the data
dt <- read_csv('data_stat450.csv')
dt2 <- dt
# Removing 'year' column
dt <- dt[-c(2)]
# Renaming column names for simplicity
colnames(dt) <- c('gridcode','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
colnames(dt2) <- c('gridcode','year','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
# Converting gridcode to a factor
dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
iforest = isolationForest$new()
dt2
iforest$fit(na.omit(dt2))
train_out = data.frame(na.omit(dt2))
train_out
train_out$pred = iforest$predict(train_out)
train_out$outlier = as.factor(ifelse(train_out$pred$anomaly_score >=0.65, "anomaly", "normal"))
train_out
barplot(table(train_out$outlier),
xlab = "Class",
col = c("red","blue")
)
# legend("topright",
# c("Anomaly","Normal"),
# fill = c("red","blue")
#)
qplot(train_out$pred$anomaly_score,train_out$Q, color = train_out$outlier)
install.packages('maps')
knitr::opts_chunk$set(echo = TRUE)
library(png)
library(gridExtra)
#Sys.setenv(LANG = "en")
library(tidyverse)
library(ggplot2)
library(GGally)
library(DataExplorer)
library(olsrr)
library(gridExtra)
library(cluster)
library(factoextra)
library(caretEnsemble)
library(caret)
library(mlbench)
library(Metrics)
library(Boruta)
library(tidymodels)   # packages for modeling and statistical analysis
library(tune)         # For hyperparameter tuning
library(workflows)    # streamline process
library(tictoc)
library(quantregForest)
library(e1071)
library(solitude)
library(maps)
# Loading the data
dt = read_csv('data_stat450.csv')
gc = read_csv('grid_codes.csv')
dt_join = merge(dt, gc, by='gridcode')
dt2 = select(dt_join, -c('...1'))
dt = select(dt_join, -c('...1','gridcode', 'year'))
# Renaming column names for simplicity
colnames(dt) = c('EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q','LAT','LONG')
colnames(dt2) = c('gridcode','year','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q','LAT','LONG') # for anomaly detection
state<-map.where(database="state",
dt$LONG, dt$LAT)
state
country<-map.where(database="world",
dt$LONG, dt$LAT)
state<-map.where(database="state",
dt$LONG, dt$LAT)
county<-map.where(database="county",
dt$LONG, dt$LAT)
country<-map.where(database="world",
dt$LONG, dt$LAT)
state<-map.where(database="state",
dt$LONG, dt$LAT)
county<-map.where(database="county",
dt$LONG, dt$LAT)
cbind(country = country, state = state, county = county)
cbind(dt$LONG, dt$LAT)
knitr::opts_chunk$set(echo = TRUE)
library(png)
library(gridExtra)
# Loading the data
dt = read_csv('data_stat450.csv')
#Sys.setenv(LANG = "en")
library(tidyverse)
library(ggplot2)
library(GGally)
library(DataExplorer)
library(olsrr)
library(gridExtra)
library(cluster)
library(factoextra)
library(caretEnsemble)
library(caret)
library(mlbench)
library(Metrics)
library(Boruta)
library(tidymodels)   # packages for modeling and statistical analysis
library(tune)         # For hyperparemeter tuning
library(workflows)    # streamline process
library(tictoc)
library(quantregForest)
library(e1071)
library(solitude)
library(RColorBrewer)
# Loading the data
dt = read_csv('data_stat450.csv')
dt2 = dt
# Removing 'year' column
dt = dt[-c(2)]
# Renaming column names for simplicity
colnames(dt) = c('gridcode','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q')
colnames(dt2) = c('gridcode','year','EVA','PEVA', 'SDEN','SDEP','SWEQ','SFAL','SMELT','TEMP', 'PREC','Q') # for anomaly detection
# Converting gridcode to a factor
dt$gridcode = as.factor(dt$gridcode)
head(dt)
length(unique(dt$gridcode)) # 23
knitr::opts_chunk$set(echo = TRUE)
library(png)
library(gridExtra)
knitr::include_graphics('image/peva_gridcode.png')
knitr::include_graphics('image/Pipeline.png')
knitr::include_graphics('image/00000f.png')
knitr::include_graphics('image/000011.png')
knitr::include_graphics('image/new_train_result.png')
#Sys.setenv(LANG = "en")
library(tidyverse)
library(ggplot2)
library(GGally)
library(DataExplorer)
library(olsrr)
library(gridExtra)
library(cluster)
library(factoextra)
library(caretEnsemble)
library(caret)
library(mlbench)
library(Metrics)
library(Boruta)
library(tidymodels)   # packages for modeling and statistical analysis
library(tune)         # For hyperparemeter tuning
library(workflows)    # streamline process
library(tictoc)
library(quantregForest)
library(e1071)
library(solitude)
library(RColorBrewer)
# Generating summary statistics for dt
summary(dt)
# EDA
plot_intro(dt)
plot_missing(dt)
plot_bar(dt)
plot_histogram(dt)
plot_density(dt)
plot_qq(dt)
plot_qq(dt, by = "gridcode")
plot_correlation(dt)
plot_boxplot(dt, by = "gridcode")
plot_scatterplot(split_columns(dt)$continuous, by = "Q")
plot_prcomp(na.omit(dt), maxcat = 4L)
# Checking dimensions of dt
nrow(dt) # 774
ncol(dt) # 11
# look at Stream Flow vs Mean Potential Evaporation
set.seed(123)
dt.valid <- na.omit(dt)
gridcode_sample <- dt.valid |> select(gridcode) |> distinct()
gridcode_sample <- sample(gridcode_sample$gridcode, 9)
dt.valid |>
filter(gridcode %in% gridcode_sample) |>
ggplot(aes_string(x="PEVA", y="Q")) +
geom_point() +
facet_wrap(~gridcode) +
geom_smooth(method="lm", se=FALSE, formula=y~x) +
labs(title="Stream Flow vs Mean Potential Evaporation") +
ylab('Stream Flow') +
xlab('Mean Potential Evaporation') +
theme(plot.caption = element_text(hjust = 0))
labels <- paste(colnames(dt[,2:11]))
boxplot(dt[,2:11],  xaxt = "n",xlab = "",
main = 'Comparing different explanatory variables (before scaling)')
axis(1, labels = FALSE)
text(x =  seq_along(labels), y = par("usr")[3] - 1, srt = 60, adj = 1,
labels = labels, xpd = TRUE)
labels <- paste(colnames(dt[,2:11]))
boxplot(dt[,2:11],  xaxt = "n",xlab = "",
main = 'Comparing different explanatory variables (before scaling)')
axis(1, labels = FALSE)
text(x =  seq_along(labels), y = par("usr")[3] - 1, srt = 60, adj = 1,
labels = labels, xpd = TRUE)
# Transformations
## right-skewed
#dt$Q = sqrt(dt$Q)
dt$EVA = (dt$EVA)^(1/3)
dt$SDEN = sqrt(dt$SDEN)
dt$SDEP = log(dt$SDEP)
dt$SWEQ = log(dt$SWEQ)
dt$SFAL = sqrt(dt$SFAL)
dt$SMELT = sqrt(dt$SMELT)
# left-skewed
dt$PEVA = sqrt(2000-dt$PEVA)
plot_density(dt|> select(EVA,SDEN,SDEP, SWEQ, SFAL, SMELT,PEVA))
set.seed(2020)
rec <- recipe(Q ~.,
data = dt[,2:11]) %>%
step_corr(all_predictors()) %>%                       # removing highly correlated features
# Z-Score Standardization
step_center(all_numeric(), -all_outcomes())%>%        # centering data at mean = 0
step_scale(all_numeric(), -all_outcomes())            # scaling data with variance  = 1
trained_rec =  prep(rec, training = dt, retain = TRUE)
dt_prep = cbind(gridcode = dt$gridcode, as.data.frame(juice(trained_rec)))
# Separating the actual test set w/o labels
main_dt <- na.omit(dt_prep)
test_nolabel_df <- dt_prep[is.na(dt$Q),]
main_dt
labels <- paste(colnames(main_dt[,2:8]))
boxplot(main_dt[,2:8],  xaxt = "n",xlab = "")
axis(1, labels = FALSE)
text(x =  seq_along(labels), y = par("usr")[3] - 1, srt = 60, adj = 1,
labels = labels, xpd = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(png)
library(gridExtra)
knitr::include_graphics('image/corr.png')
knitr::include_graphics('image/corr.png')
